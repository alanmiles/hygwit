# == Schema Information
#
# Table name: insurance_formulas
#
#  id                          :integer          not null, primary key
#  country_id                  :integer
#  minimum_salary              :integer
#  maximum_salary              :integer
#  employer_contribution       :decimal(5, 2)    default(0.0)
#  employee_contribution       :decimal(5, 2)    default(0.0)
#  employer_contribution_expat :decimal(5, 2)    default(0.0)
#  employee_contribution_expat :decimal(5, 2)    default(0.0)
#  created_at                  :datetime         not null
#  updated_at                  :datetime         not null
#

class InsuranceFormula < ActiveRecord::Base
  attr_accessible :employee_contribution, :employee_contribution_expat, :employer_contribution, 
                  :employer_contribution_expat, :minimum_salary, :maximum_salary

  belongs_to :country

  validates :country_id,								presence: true
  validates :minimum_salary,						presence: true, numericality: { only_integer: true, greater_than_or_equal_to: 0 }, 
  																			uniqueness: { scope: :country_id }
  validates :maximum_salary,						presence: true, numericality: { only_integer: true, greater_than_or_equal_to: 0 }, 
  																			uniqueness: { scope: :country_id }
  validates :employer_contribution,			presence: true, numericality: true, inclusion: { in: 0..100 }
  validates :employee_contribution,			presence: true, numericality: true, inclusion: { in: 0..100 }
  validates :employer_contribution_expat,			presence: true, numericality: true, inclusion: { in: 0..100 }
  validates :employee_contribution_expat,			presence: true, numericality: true, inclusion: { in: 0..100 }
  
  validate  :create_overlapping, on: :create
  validate  :update_overlapping, on: :update
  validate  :negative_salary_range
  
  
  private
    def create_overlapping
      unless InsuranceFormula.where(
          'country_id = ? AND((minimum_salary < ? AND maximum_salary > ?) OR (minimum_salary > ? AND minimum_salary < ?))',
          country_id,
          minimum_salary, minimum_salary,
          minimum_salary, maximum_salary
          ).empty?
        errors[:base] << 'The salary range entered overlaps with another line in the table'
      end
    end
      
    def update_overlapping  
      unless InsuranceFormula.where(
          'id != ? AND country_id = ? AND((minimum_salary < ? AND maximum_salary > ?) 
              OR (minimum_salary > ? AND minimum_salary < ?))',
          self.id, country_id,
          minimum_salary, minimum_salary,
          minimum_salary, maximum_salary
          ).empty?
        errors[:base] << 'The salary range entered overlaps with another line in the table'
      end       
    end
    
    def negative_salary_range
      unless minimum_salary.nil? || maximum_salary.nil?
        if maximum_salary <= minimum_salary
          errors[:base] << "The maximum salary in the range you're defining must be greater than the minimum salary"
        end
      end
    end
end
